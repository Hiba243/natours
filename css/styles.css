/*reset browser's default styling*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*to make box sizing as an inheritable property*/ }

html {
  font-size: 62.5%;
  /*1 rem=10px, 62.5%of root font size 16px=10px*/ }

body {
  box-sizing: border-box; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*so that it looks exactly how it is without animation*/ } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*so that it looks exactly how it is without animation*/ } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*so that it looks exactly how it is without animation*/ } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  /*setting a white border on entire webpage*/ }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*when using animations, sometimes some weird things happen, like moving upward. to avoid that use backface-visibilty as hidden.*/
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    text-indent: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /*
        animation-delay: 3s;  wait 3s, then start animation
        animation-iteration-count: 3; repeat animation 3 times
        */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    text-indent: 1.75rem;
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.3rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-med {
  margin-bottom: 4rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.btn {
  /*button before and after we click on it should appear the same*/ }
  .btn:link, .btn:visited {
    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    /*we place transition in the initial class, and we say on all pseudo elements transitions can happen*/
    position: relative;
    /*because we want btn:after to have position absolute and we want it exactly behind the button, we have placed position relative here*/ }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
      /*for the fade-out effect*/ }
  .btn-active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777;
    padding: 15px 40px;
    display: inline-block;
    /*so that we can use text-align center of textbox to align the button to the center*/ }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    /*mandatory to write this*/
    display: inline-block;
    height: 100%;
    /*after is a child element. so we want it to be 100% height and width of parent i.e button*/
    width: 100%;
    border-radius: 10rem;
    /*we want after button and original button to look the same and to be behind the original button*/
    position: absolute;
    top: 0;
    /*this button after should be placed behind the button*/
    left: 0;
    z-index: -1;
    transition: all .4s;
    /*button hover scale animation*/ }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /*.75s of delay*/
    animation-fill-mode: backwards;
    /* want it to appear after delay. useful for when you dont want an element to appear when you load at first time.*/ }

.btn-text:link, .btn-text:visited {
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  font-size: 1.6rem;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.header {
  height: 95vh;
  /*landing page should be 95% of viewport height*/
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /*it always fit the background to the width of the viewport*/
  background-position: top;
  /*so that image is always at the top of viewport, it will crop some part of bottom*/
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*specify coordinates of resultant polygon in. specify coordinates in clockwise direction*/
  position: relative; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /*will move half of the width of the box, will move it to left side, similary move up half of height*/
    text-align: center;
    /*helps align the button, which is a block element, in the center */ }

/* .logo:hover{
    animation: moveInRight 1s ease-out; we can use animation not just on page load, but on hover also
} */
.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class*="col-"] {
    float: left; }
    .row [class*="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem)/2); }
  .row .col-2-of-3 {
    width: calc(2*((100% - 2 * 6rem)/3) + 6rem); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem)/3); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem)/4); }
  .row .col-2-of-4 {
    width: calc(2*((100% - 3 * 6rem)/4) +  6rem); }
  .row .col-3-of-4 {
    width: calc(3*((100% - 3 * 6rem)/4) + (2 * 6rem)); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
