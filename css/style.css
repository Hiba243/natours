/*reset browser's default styling*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*to make box sizing as an inheritable property*/ }

html {
  font-size: 62.5%;
  /*1 rem=10px, 62.5%of root font size 16px=10px*/ }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  /*setting a white border on entire webpage*/
  box-sizing: border-box; }

.header {
  height: 95vh;
  /*landing page should be 95% of viewport height*/
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /*it always fit the background to the width of the viewport*/
  background-position: top;
  /*so that image is always at the top of viewport, it will crop some part of bottom*/
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*specify coordinates of resultant polygon in. specify coordinates in clockwise direction*/
  position: relative; }

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem; }

.header__logo {
  height: 3.5rem; }

/* .logo:hover{
    animation: moveInRight 1s ease-out; we can use animation not just on page load, but on hover also
} */
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*when using animations, sometimes some weird things happen, like moving upward. to avoid that use backface-visibilty as hidden.*/
  margin-bottom: 6rem; }

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  text-indent: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /*
    animation-delay: 3s;  wait 3s, then start animation
    animation-iteration-count: 3; repeat animation 3 times
    */ }

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  text-indent: 1.75rem;
  animation: moveInRight 1s ease-out; }

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*will move half of the width of the box, will move it to left side, similary move up half of height*/
  text-align: center;
  /*helps align the button, which is a block element, in the center */ }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*so that it looks exactly how it is without animation*/ } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*so that it looks exactly how it is without animation*/ } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*so that it looks exactly how it is without animation*/ } }

/*button before and after we click on it should appear the same*/
.btn:link, .btn:visited {
  font-size: 1.6rem;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  /*we place transition in the initial class, and we say on all pseudo elements transitions can happen*/
  position: relative;
  /*because we want btn:after to have position absolute and we want it exactly behind the button, we have placed position relative here*/ }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }

.btn-active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777;
  padding: 15px 40px;
  display: inline-block;
  /*so that we can use text-align center of textbox to align the button to the center*/ }

.btn::after {
  content: "";
  /*mandatory to write this*/
  display: inline-block;
  height: 100%;
  /*after is a child element. so we want it to be 100% height and width of parent i.e button*/
  width: 100%;
  border-radius: 10rem;
  /*we want after button and original button to look the same and to be behind the original button*/
  position: absolute;
  top: 0;
  /*this button after should be placed behind the button*/
  left: 0;
  z-index: -1;
  transition: all .4s;
  /*button hover scale animation*/ }

.btn--white::after {
  background-color: #fff; }

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
  /*for the fade-out effect*/ }

.btn--animated {
  animation: moveInBottom .5s ease-out .75s;
  /*.75s of delay*/
  animation-fill-mode: backwards;
  /* want it to appear after delay. useful for when you dont want an element to appear when you load at first time.*/ }
